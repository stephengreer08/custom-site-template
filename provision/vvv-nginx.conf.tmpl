server {
    listen          80;
    listen          443 ssl;
    server_name     ~^.*\.test$;
    root            {vvv_path_to_site}/htdocs;
    #access_log /var/log/custom.log main;
    location /wp-content {
        #access_log /var/log/custom-image.log wpc;
    }
    # Directives to send expires headers and turn off 404 error logging.
   location ~* \.(js|css|png|jpe?g|gif|ico)$ {
        expires 24h;
        log_not_found off;
        #access_log /var/log/custom-image.log wpc;
        try_files $uri $uri/ @production;
    }
    location @production {
        #rewrite_log on;
        resolver 8.8.8.8;
        #access_log /var/log/custom-image.log PROXY;
        #error_log /var/log/custom-error.log debug;
        rewrite ^(.*\/blogs.dir\/.*\/)(getty-images\/.*)$ /wp-content/uploads/$2?$args&fsproxy=true break;
        rewrite ^(.*\/blogs.dir\/[0-9]+\/files\/)sites\/[0-9]+\/(.*)$ $1$2?$args&fsproxy=true break;
        proxy_pass https://cdn.fansided.com;
    }
    location / {
        index index.php index.html;
        try_files $uri $uri/ /index.php?$args;
    }
    # Specify a charset
    charset utf-8;
    # Weird things happened to me when I had gzip on, may need to try
    # again in the future as it could have been related to many other
    # factors - JF
    gzip off;
    # Add trailing slash to */wp-admin requests.
    rewrite /wp-admin$ $scheme://$host$uri/ permanent;
    # this prevents hidden files (beginning with a period) from being served
    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all;
    }
    # Pass uploaded files to wp-includes/ms-files.php.
    rewrite /files/$ /index.php last;
    if ($uri !~ wp-content/plugins) {
        #rewrite /files/(.+)$ /wp-includes/ms-files.php?file=$1 last;
    }
    # Rewrite multisite in a subdirectory
    if (!-e $request_filename) {
        rewrite ^/[_0-9a-zA-Z-]+(/wp-.*) $1 last;
        rewrite ^/[_0-9a-zA-Z-]+.*(/wp-admin/.*\.php)$ $1 last;
        rewrite ^/[_0-9a-zA-Z-]+(/.*\.php)$ $1 last;
    }
    location ~ \.php$ {
        # Try the files specified in order. In our case, try the requested URI and if
        # that fails, try (successfully) to pass a 404 error.
        try_files      $uri =404;
        # Include the fastcgi_params defaults provided by nginx
        include        /etc/nginx/fastcgi_params;
        fastcgi_read_timeout 3600s;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 128k;
        # SCRIPT_FILENAME is a required parameter for things to work properly,
        # but was missing in the default fastcgi_params on upgrade to nginx 1.4.
        # We define it here to be sure that it exists.
        fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;
        # Use the upstream defined in the upstream variable.
        fastcgi_pass   $upstream;
        # And get to serving the file!
        fastcgi_index  index.php;
    }
}
